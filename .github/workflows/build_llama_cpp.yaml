name: Build llama.cpp linux binaries

on:
  push:
    tags:
      - "v*.*.*"

env:
  BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
  GGML_NLOOP: 3
  GGML_N_THREADS: 1

jobs:
  build_artifacts:
    name: Build Artifacts
    runs-on: ubuntu-latest

    env:
      OPENCL_VERSION: 2023.04.17
      CLBLAST_VERSION: 1.6.0
      SDE_VERSION: 9.33.0-2024-01-07

    strategy:
      matrix:
        include:
          - build: 'noavx'
            defines: '-DLLAMA_NATIVE=OFF -DLLAMA_BUILD_SERVER=ON -DLLAMA_AVX=OFF -DLLAMA_AVX2=OFF -DLLAMA_FMA=OFF -DBUILD_SHARED_LIBS=ON'
          - build: 'avx2'
            defines: '-DLLAMA_NATIVE=OFF -DLLAMA_BUILD_SERVER=ON -DBUILD_SHARED_LIBS=ON'
          # - build: 'avx'
          #   defines: '-DLLAMA_NATIVE=OFF -DLLAMA_BUILD_SERVER=ON -DLLAMA_AVX2=OFF -DBUILD_SHARED_LIBS=ON'
          # - build: 'avx512'
          #   defines: '-DLLAMA_NATIVE=OFF -DLLAMA_BUILD_SERVER=ON -DLLAMA_AVX512=ON -DBUILD_SHARED_LIBS=ON'
          # - build: 'clblast'
          #   defines: '-DLLAMA_NATIVE=OFF -DLLAMA_BUILD_SERVER=ON -DLLAMA_CLBLAST=ON -DBUILD_SHARED_LIBS=ON -DCMAKE_PREFIX_PATH="$env:RUNNER_TEMP/clblast"'
          # - build: 'arm64'
          #   defines: '-A ARM64 -DLLAMA_NATIVE=OFF -DLLAMA_BUILD_SERVER=ON -DBUILD_SHARED_LIBS=ON'


    steps:
      - name: Clone
        id: checkout
        uses: actions/checkout@v4

      - name: Get Variables
        run: |
          echo "version=$(cat VERSION)" >> $GITHUB_ENV
          echo "llamacpp_version=$(cat Runtime/LLMUnitySetup.cs |grep LLamaCPPVersion|cut -d '"' -f2)" >> $GITHUB_ENV

      - name: Clone llama.cpp
        run: |
          git clone https://github.com/ggerganov/llama.cpp llama.cpp
          cd llama.cpp
          git checkout ${{ env.llamacpp_version }}

      - name: Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install build-essential
          sudo apt-get install cmake
          sudo apt-get install tar
          sudo apt-get install p7zip-full

      - name: Download OpenCL SDK
        id: get_opencl
        if: ${{ matrix.build == 'clblast' }}
        run: |
          curl -o $env:RUNNER_TEMP/opencl.zip -L "https://github.com/KhronosGroup/OpenCL-SDK/releases/download/v${env:OPENCL_VERSION}/OpenCL-SDK-v${env:OPENCL_VERSION}-Win-x64.zip"
          mkdir $env:RUNNER_TEMP/opencl
          unzip -q "$RUNNER_TEMP/opencl.zip" -d "$RUNNER_TEMP/opencl"
          unzip -q "$RUNNER_TEMP/opencl.zip" -d "$RUNNER_TEMP"
          mv "$RUNNER_TEMP"/opencl/*/* "$RUNNER_TEMP"/opencl/

      - name: Download CLBlast
        id: get_clblast
        if: ${{ matrix.build == 'clblast' }}
        run: |
          curl -o $env:RUNNER_TEMP/clblast.7z -L "https://github.com/CNugteren/CLBlast/releases/download/${env:CLBLAST_VERSION}/CLBlast-${env:CLBLAST_VERSION}-windows-x64.7z"
          curl -o $env:RUNNER_TEMP/CLBlast.LICENSE.txt -L "https://github.com/CNugteren/CLBlast/raw/${env:CLBLAST_VERSION}/LICENSE"
          7z x "-o${env:RUNNER_TEMP}" $env:RUNNER_TEMP/clblast.7z
          mv $env:RUNNER_TEMP/CLBlast-${env:CLBLAST_VERSION}-windows-x64 clblast
          find "$RUNNER_TEMP/clblast" -type f -name '*.cmake' -print0 | while IFS= read -r -d '' f; do
              txt=$(<"$f")
              echo "$txt" | sed "s|C:/vcpkg/packages/opencl_x64-windows/|$RUNNER_TEMP/opencl/|g" > "$f"
          done

      - name: Build
        id: cmake_build
        run: |
          mkdir build
          cd build
          cmake ../llama.cpp ${{ matrix.defines }}
          cmake --build . --config Release -j ${env:NUMBER_OF_PROCESSORS}

      - name: Add clblast.dll
        id: add_clblast_dll
        if: ${{ matrix.build == 'clblast' }}
        run: |
          cp $env:RUNNER_TEMP/clblast/lib/clblast.dll ./build/bin/Release
          cp $env:RUNNER_TEMP/CLBlast.LICENSE.txt ./build/bin/Release/CLBlast-${env:CLBLAST_VERSION}.txt

      # - name: Test
      #   id: cmake_test
      #   run: |
      #     cd build
      #     ctest -L main -C Release --verbose --timeout 900

      - name: Pack artifacts
        id: pack_artifacts
        run: |
          cp llama.cpp/LICENSE build/bin/llama.cpp.txt
          rm build/bin/test*
          zip -j llama-${{ env.llamacpp_version }}-bin-linux-${{ matrix.build }}-x64.zip build/bin/*

      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: llama-${{ env.llamacpp_version }}-bin-linux-${{ matrix.build }}-x64.zip
          path: llama-${{ env.llamacpp_version }}-bin-linux-${{ matrix.build }}-x64.zip
  

  create_release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build_artifacts
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get Variables
        run: |
          echo "version=$(cat VERSION)" >> $GITHUB_ENV

      - name: Download Artifacts
        uses: actions/download-artifact@v4

      - name: list
        run: |
          ls

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          name: "Release ${{ env.version }}"
          body_path: CHANGELOG.release.md
          files: llama-*

          