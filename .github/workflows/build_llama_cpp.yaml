name: Build llama.cpp linux binaries

on:
  push:

jobs:
  build_artifacts:
    name: Build Artifacts
    runs-on: ubuntu-latest

    env:
      OPENCL_VERSION: 2023.04.17
      CLBLAST_VERSION: 1.6.0
      SDE_VERSION: 9.33.0-2024-01-07

    strategy:
      matrix:
        include:
          - build: 'noavx'
            defines: '-DLLAMA_NATIVE=OFF -DLLAMA_BUILD_SERVER=ON -DLLAMA_AVX=OFF -DLLAMA_AVX2=OFF -DLLAMA_FMA=OFF -DBUILD_SHARED_LIBS=ON'
          - build: 'avx2'
            defines: '-DLLAMA_NATIVE=OFF -DLLAMA_BUILD_SERVER=ON -DBUILD_SHARED_LIBS=ON'
          - build: 'avx'
            defines: '-DLLAMA_NATIVE=OFF -DLLAMA_BUILD_SERVER=ON -DLLAMA_AVX2=OFF -DBUILD_SHARED_LIBS=ON'
          - build: 'avx512'
            defines: '-DLLAMA_NATIVE=OFF -DLLAMA_BUILD_SERVER=ON -DLLAMA_AVX512=ON -DBUILD_SHARED_LIBS=ON'
          - build: 'clblast'
            defines: '-DLLAMA_NATIVE=OFF -DLLAMA_BUILD_SERVER=ON -DLLAMA_CLBLAST=ON -DBUILD_SHARED_LIBS=ON -DCMAKE_PREFIX_PATH="$GITHUB_WORKSPACE/clblast"'
          - build: 'cuda-cu11.7.1'
            defines: '-DLLAMA_NATIVE=OFF -DLLAMA_BUILD_SERVER=ON -DLLAMA_CUDA=ON -DBUILD_SHARED_LIBS=ON'
          - build: 'cuda-cu12.2.0'
            defines: '-DLLAMA_NATIVE=OFF -DLLAMA_BUILD_SERVER=ON -DLLAMA_CUDA=ON -DBUILD_SHARED_LIBS=ON'

    steps:
      - name: Clone
        id: checkout
        uses: actions/checkout@v4

      - name: Get Variables
        run: |
          echo "LLAMACPP_VERSION=$(echo "${GITHUB_REF#refs/tags/}")" >> $GITHUB_ENV
          echo "CUDA=$(echo "${{ matrix.build }}" | cut -d '-' -f2 | cut -c 3- )" >> $GITHUB_ENV

      - name: Clone llama.cpp
        run: |
          git clone https://github.com/ggerganov/llama.cpp llama.cpp
          cd llama.cpp
          git checkout ${{ env.LLAMACPP_VERSION }}
          cd ..
          mkdir -p build/licenses build/libs
          cp llama.cpp/LICENSE build/licenses/llama.cpp.LICENSE.txt

      - name: Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install build-essential cmake tar p7zip-full opencl-headers

      - name: Download OpenCL SDK
        id: get_opencl
        if: ${{ matrix.build == 'clblast' }}
        run: |
          git clone --recurse-submodules https://github.com/KhronosGroup/OpenCL-SDK.git
          curl -o build/licenses/OpenCL.LICENSE.txt -L "https://raw.githubusercontent.com/KhronosGroup/OpenCL-SDK/v${OPENCL_VERSION}/LICENSE"
          mkdir OpenCL-SDK/build
          cd OpenCL-SDK/build
          cmake .. -DBUILD_DOCS=OFF -DBUILD_EXAMPLES=OFF -DBUILD_TESTING=OFF -DOPENCL_SDK_BUILD_SAMPLES=OFF -DOPENCL_SDK_TEST_SAMPLES=OFF
          cmake --build . --config Release
          cmake --install . --prefix install
          cp install/lib/libOpenCL.so ../../build/libs/libOpenCL.so.1

      - name: Download CLBlast
        id: get_clblast
        if: ${{ matrix.build == 'clblast' }}
        run: |
          curl -o clblast.7z -L "https://github.com/CNugteren/CLBlast/releases/download/${CLBLAST_VERSION}/CLBlast-${CLBLAST_VERSION}-linux-x86_64.tar.gz"
          curl -o build/licenses/CLBlast.LICENSE.txt -L "https://github.com/CNugteren/CLBlast/raw/${CLBLAST_VERSION}/LICENSE"
          7z x clblast.7z
          mv CLBlast-* clblast
          cp clblast/lib/libclblast.so.$CLBLAST_VERSION build/libs/libclblast.so.1
          
          echo "
          set(CMAKE_IMPORT_FILE_VERSION 1)
          
          set_property(TARGET clblast APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)
          set_target_properties(clblast PROPERTIES
            IMPORTED_LINK_INTERFACE_LIBRARIES_RELEASE \"`pwd`/build/libs/libOpenCL.so.1\"
            IMPORTED_LOCATION_RELEASE \"`pwd`/build/libs/libclblast.so.1\"
            IMPORTED_SONAME_RELEASE \"libclblast.so.1\"
            )
          
          list(APPEND _cmake_import_check_targets clblast )
          list(APPEND _cmake_import_check_files_for_clblast \"libs/libclblast.so.1\" )
          set(CMAKE_IMPORT_FILE_VERSION)
          " > clblast/lib/cmake/CLBlast/CLBlastConfig-release.cmake

      - uses: Jimver/cuda-toolkit@v0.2.11
        id: cuda-toolkit
        if: startsWith(matrix.build, 'cuda')
        with:
          cuda: ${{ env.CUDA }}
          method: 'network'
          linux-local-args: '["--toolkit"]'

      - name: Copy and pack Cuda runtime
        if: startsWith(matrix.build, 'cuda')
        run: |
          CUDA_LIBS="${{ steps.cuda-toolkit.outputs.CUDA_PATH }}/targets/x86_64-linux/lib"
          echo "Cuda install location: $CUDA_LIBS"
          zip -j cudart-llama-bin-linux-cu${{ env.CUDA }}-x64.zip $CUDA_LIBS/libcudart.so $CUDA_LIBS/libcublas.so $CUDA_LIBS/libcublasLt.so

      - name: Build
        id: cmake_build
        run: |
          cd build
          cmake ../llama.cpp ${{ matrix.defines }} -DCMAKE_BUILD_RPATH_USE_ORIGIN=ON -DCMAKE_RUNTIME_OUTPUT_DIRECTORY=$(pwd) -DCMAKE_LIBRARY_OUTPUT_DIRECTORY=libs
          cmake --build . --config Release -j ${NUMBER_OF_PROCESSORS}
          ldd bin/server

      - name: Test
        id: cmake_test
        if: ${{ matrix.build != 'clblast' && !startsWith(matrix.build, 'cuda') }}
        run: |
          cd build
          ctest -L main --verbose --timeout 900

      - name: Pack artifacts
        id: pack_artifacts
        run: |
          zip -r llama-${{ env.LLAMACPP_VERSION }}-bin-linux-${{ matrix.build }}-x64.zip build/bin/server build/licenses/* build/libs/*

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: llama-${{ env.LLAMACPP_VERSION }}-bin-linux-${{ matrix.build }}-x64.zip
          path: llama-${{ env.LLAMACPP_VERSION }}-bin-linux-${{ matrix.build }}-x64.zip
  
      - name: Upload Cuda runtime
        if: startsWith(matrix.build, 'cuda')
        uses: actions/upload-artifact@v3
        with:
          path: cudart-llama-bin-linux-cu${{ env.CUDA }}-x64.zip
          name: cudart-llama-bin-linux-cu${{ env.CUDA }}-x64.zip

  create_release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build_artifacts
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get Variables
        run: |
          echo "LLAMACPP_VERSION=$(echo "${GITHUB_REF#refs/tags/}")" >> $GITHUB_ENV

      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: list
        run: |
          ls -R artifacts

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          name: "${{ env.LLAMACPP_VERSION }}"
          files: "artifacts/*/*"